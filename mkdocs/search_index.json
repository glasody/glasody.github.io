{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nGames are something that makes the world go round. Without games I am not sure what kind of world it would have been.\n\n\nMy name is Seong Jho and I am a \nNOOB\n to the world of game development. I am a game loving geek from the marrows of my bones to the tip of every single strand of hair on my body and game development has opened a whole new chapter in my life.\n\n\nMy life as a game developer has been around 4 months and counting up! I am eager to learn more about game programming and develop my skills and knowledge to become a \nL33T\n amongst all!\n\n\nGL HF!",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "Games are something that makes the world go round. Without games I am not sure what kind of world it would have been.  My name is Seong Jho and I am a  NOOB  to the world of game development. I am a game loving geek from the marrows of my bones to the tip of every single strand of hair on my body and game development has opened a whole new chapter in my life.  My life as a game developer has been around 4 months and counting up! I am eager to learn more about game programming and develop my skills and knowledge to become a  L33T  amongst all!  GL HF!",
            "title": "Welcome"
        },
        {
            "location": "/learning/",
            "text": "C++\n\n\nThe first thing to beginnning my steps as a game developer was to learn a programming language to suit the needs, and what better language to learn than \nC++\n\n\nBaby steps\n\n\nThese are the first line of code that I had written when learning about C++  \n\n\nint main()\n{\n    std::cout << \"Hello World!\" << std::endl;\n\n    return 0;\n}  \n\n\n\n\nAhhh, the good old greetings to start you off\n\n\nTo Infinity...\n\n\nC++ was a language that I wasnt really used to, it required a lot of learning to even be able to write simple programs\n\nIt required \nHeader\n:  \n\n\n#ifndef __DICE_H__\n#define __DICE_H__\n#include <memory>\n#include <vector>\n\nclass Dice\n{\npublic:\n    Dice();\n    ~Dice();\n    static std::vector<int> roll(bool playerWin);\n    void SetQuantity(int qunatity);\n    static void ClearDice();\n    static std::vector<int> GetDice();\nprivate:\n    int quantity;\n};\n#endif //__DICE_H__\n\n\n\n\n...and \nFooter\n:  \n\n\n#include \"Dice.h\"\n#include <iostream>\n#include <cmath>\n#include <ctime>\n#include <stdio.h>\n#include <vector>\n\nDice::Dice()\n    :quantity(0)\n{\n    srand(time(nullptr));\n}\n\n\nstd::vector<int> dices;\n\nstd::vector<int> \nDice::roll(bool playerWin)\n{\n    //player rolls\n    if (dices.empty())\n    {\n        int dice1 = (rand() % 6) + 1;\n        int dice2 = (rand() % 6) + 1;\n        if (playerWin)\n        {\n            while (dice1 < 2 || dice2 < 2)\n            {\n                dice1 = (rand() % 6) + 1;\n                dice2 = (rand() % 6) + 1;\n            }\n        }\n        else\n        {\n            while (dice1 == dice2)\n            {\n                dice2 = (rand() % 6) + 1;\n            }\n        }\n        dices.push_back(dice1);\n        dices.push_back(dice2);\n    }\n    //ai rolls\n    else\n    {\n        int playerTotal = dices[0] + dices[1];\n        int dice1 = (rand() % 6) + 1;\n        int dice2 = (rand() % 6) + 1;\n        if (playerWin)\n        {\n            if (dices[0] != dices[1])\n            {\n                while (dice1 == dice2 || (dice1 + dice2) >= playerTotal)\n                {\n                    dice1 = (rand() % 6) + 1;\n                    dice2 = (rand() % 6) + 1;\n                }\n            }\n        }\n        else\n        {\n            while (dice1 != dice2 && playerTotal >= (dice1 + dice2))\n            {\n                dice1 = (rand() % 6) + 1;\n                dice2 = (rand() % 6) + 1;\n            }\n        }\n        dices.push_back(dice1);\n        dices.push_back(dice2);\n    }\n    return dices;\n}\n\nvoid\nDice::SetQuantity(int qunatity)\n{\n    Dice::quantity = qunatity;\n}\n\nvoid\nDice::ClearDice()\n{\n    dices.clear();\n}\n\nstd::vector<int>\nDice::GetDice()\n{\n    return dices;\n}\n...\n\n\n\n\nFrom a person who learnt to program using a Object Oriented language like \nJava\n & \nC#\n, it took some time getting my head around the differences between the two files.\n\nOh, and also this:\n\n\nDice::~Dice()\n{\n\n}\n\n\n\n\n...\"What is this!? It is a destructor? what does it do? Why do we need it?\" were some of my first impression on the whole structure of C++, but I was able to slowly pick it up and the result were like so:\n\n\n\nAnd Beyond...\n\n\nThat was just the tip of the iceberg, I would say that was something decent... but then we were pushed into the deep end.\n\nOur mission was to build a space and fly to into space to fight off the incoming invasion!!!\n\nWe were given some basic equipment to help us on our way such as the \nGP2DFramework\n that our \nCommander\n supplied us with.\nWe readied our ships for battle\n\n\n// W02.1: Load the player ship sprite.\n// For example: Sprite* pPlayerSprite = m_pBackBuffer->CreateSprite(\"assets\\\\playership.png\");\n\nSprite* player_sprite = m_pBackBuffer->CreateSprite(\"assets\\\\playership.png\");\n// W02.1: Create the player ship instance.\nplayer_sprite->SetX(static_cast<int>(width / 2 - player_sprite->GetWidth() / 2));\nplayer_sprite->SetY(static_cast<int>(height - player_sprite->GetHeight() * 1.5));\n\nplayership = new PlayerShip();\nplayership->SetPosition(static_cast<int>(width / 2 - player_sprite->GetWidth() / 2),\n    static_cast<int>(height - player_sprite->GetHeight() * 1.5));\nplayership->Initialise(player_sprite);\n\n\n\n\n\nWe replenished our ammo:\n\n\nvoid \nGame::FireSpaceShipBullet()\n{\n    // W02.3: Load the player bullet sprite.      \n    Sprite* bullet_sprite = m_pBackBuffer->CreateSprite(\"assets\\\\playerbullet.png\");\n    bullet_sprite->SetX(static_cast<int>(playership->GetPositionX() + playership->GetWidth() / 2 - bullet_sprite->GetWidth() / 2));\n    bullet_sprite->SetY(static_cast<int>(playership->GetPositionY()));\n    // W02.3: Create a new bullet object.\n    Bullet* bullet = new Bullet();\n    bullet->SetX(static_cast<int>(playership->GetPositionX() + playership->GetWidth() / 2 - bullet_sprite->GetWidth() / 2));\n    bullet->SetY(static_cast<int>(playership->GetPositionY()));\n    bullet->Initialise(bullet_sprite);\n    // W02.3: Set the bullets vertical velocity.\n    bullet->SetVerticalVelocity(-200);\n    // W02.3: Add the new bullet to the bullet container.\n    bullets_container.push_back(bullet);\n}\n\n\n\n\n\nAnd now we were ready for war!\n\n\nvoid \nGame::SpawnEnemy(int x, int y)\n{\n    // W02.2: Load the alien enemy sprite file.\n    Sprite* enemy_sprite = m_pBackBuffer->CreateSprite(\"assets\\\\alienenemy.png\");\n    enemy_sprite->SetX(static_cast<int>(x * enemy_sprite->GetWidth() * 1.5 + 72));\n    enemy_sprite->SetY(static_cast<int>(y * enemy_sprite->GetHeight() * 1.5 + enemy_sprite->GetHeight()));\n    // W02.2: Create a new Enemy object. \n    Enemy* enemy = new Enemy();\n    enemy->SetX(static_cast<int>(x * enemy_sprite->GetWidth() * 1.5 + 72));\n    enemy->SetY(static_cast<int>(y * enemy_sprite->GetHeight() * 1.5 + enemy_sprite->GetHeight()));\n    enemy->Initialise(enemy_sprite);\n    // W02.2: Add the new Enemy to the enemy container.\n    enemies_container.push_back(enemy);\n}\n\n\n\n\n\nThe invaders had no chance...\n\n\nenemies_container.erase(\n        std::remove_if(\n        enemies_container.begin(), enemies_container.end(),\n        [](Enemy* e)\n        {\n            bool dead = e->IsDead();\n            if (dead)\n            {\n                delete e;\n                e = 0;\n            }\n            return dead;\n        }), enemies_container.end());\n\n\n\n\n\n\nThe Clean up\n\n\nAfter the battle was over, we had to do a lot of cleanup. Which wasnt something that we were too familiar with.\n\n\nGame::~Game()\n{\n    delete m_pInputHandler;\n    m_pInputHandler = 0;\n    delete m_pBackBuffer;\n    m_pBackBuffer = 0;\n    delete playership;\n    playership = 0;\n\n    for (std::vector<Enemy*>::iterator iter = enemies_container.begin();\n        iter != enemies_container.end(); ++iter)\n    {\n        delete *iter;\n        *iter = 0;\n    }\n\n    for (std::vector<Bullet*>::iterator iter = bullets_container.begin();\n        iter != bullets_container.end(); ++iter)\n    {\n        delete *iter;\n        *iter = 0;\n    }\n}\n\n\n\n\nIn the end, this little run taught us to create much more advanced solutions using C++, we were also able to do leak detection through some lines of code and clean had to scavenge the solutions to stop the leaks from happening. with the help of other third party open-source api.",
            "title": "Learning"
        },
        {
            "location": "/learning/#c",
            "text": "The first thing to beginnning my steps as a game developer was to learn a programming language to suit the needs, and what better language to learn than  C++",
            "title": "C++"
        },
        {
            "location": "/learning/#baby-steps",
            "text": "These are the first line of code that I had written when learning about C++    int main()\n{\n    std::cout << \"Hello World!\" << std::endl;\n\n    return 0;\n}    Ahhh, the good old greetings to start you off",
            "title": "Baby steps"
        },
        {
            "location": "/learning/#to-infinity",
            "text": "C++ was a language that I wasnt really used to, it required a lot of learning to even be able to write simple programs \nIt required  Header :    #ifndef __DICE_H__\n#define __DICE_H__\n#include <memory>\n#include <vector>\n\nclass Dice\n{\npublic:\n    Dice();\n    ~Dice();\n    static std::vector<int> roll(bool playerWin);\n    void SetQuantity(int qunatity);\n    static void ClearDice();\n    static std::vector<int> GetDice();\nprivate:\n    int quantity;\n};\n#endif //__DICE_H__  ...and  Footer :    #include \"Dice.h\"\n#include <iostream>\n#include <cmath>\n#include <ctime>\n#include <stdio.h>\n#include <vector>\n\nDice::Dice()\n    :quantity(0)\n{\n    srand(time(nullptr));\n}\n\n\nstd::vector<int> dices;\n\nstd::vector<int> \nDice::roll(bool playerWin)\n{\n    //player rolls\n    if (dices.empty())\n    {\n        int dice1 = (rand() % 6) + 1;\n        int dice2 = (rand() % 6) + 1;\n        if (playerWin)\n        {\n            while (dice1 < 2 || dice2 < 2)\n            {\n                dice1 = (rand() % 6) + 1;\n                dice2 = (rand() % 6) + 1;\n            }\n        }\n        else\n        {\n            while (dice1 == dice2)\n            {\n                dice2 = (rand() % 6) + 1;\n            }\n        }\n        dices.push_back(dice1);\n        dices.push_back(dice2);\n    }\n    //ai rolls\n    else\n    {\n        int playerTotal = dices[0] + dices[1];\n        int dice1 = (rand() % 6) + 1;\n        int dice2 = (rand() % 6) + 1;\n        if (playerWin)\n        {\n            if (dices[0] != dices[1])\n            {\n                while (dice1 == dice2 || (dice1 + dice2) >= playerTotal)\n                {\n                    dice1 = (rand() % 6) + 1;\n                    dice2 = (rand() % 6) + 1;\n                }\n            }\n        }\n        else\n        {\n            while (dice1 != dice2 && playerTotal >= (dice1 + dice2))\n            {\n                dice1 = (rand() % 6) + 1;\n                dice2 = (rand() % 6) + 1;\n            }\n        }\n        dices.push_back(dice1);\n        dices.push_back(dice2);\n    }\n    return dices;\n}\n\nvoid\nDice::SetQuantity(int qunatity)\n{\n    Dice::quantity = qunatity;\n}\n\nvoid\nDice::ClearDice()\n{\n    dices.clear();\n}\n\nstd::vector<int>\nDice::GetDice()\n{\n    return dices;\n}\n...  From a person who learnt to program using a Object Oriented language like  Java  &  C# , it took some time getting my head around the differences between the two files. \nOh, and also this:  Dice::~Dice()\n{\n\n}  ...\"What is this!? It is a destructor? what does it do? Why do we need it?\" were some of my first impression on the whole structure of C++, but I was able to slowly pick it up and the result were like so:",
            "title": "To Infinity..."
        },
        {
            "location": "/learning/#and-beyond",
            "text": "That was just the tip of the iceberg, I would say that was something decent... but then we were pushed into the deep end. \nOur mission was to build a space and fly to into space to fight off the incoming invasion!!! \nWe were given some basic equipment to help us on our way such as the  GP2DFramework  that our  Commander  supplied us with.\nWe readied our ships for battle  // W02.1: Load the player ship sprite.\n// For example: Sprite* pPlayerSprite = m_pBackBuffer->CreateSprite(\"assets\\\\playership.png\");\n\nSprite* player_sprite = m_pBackBuffer->CreateSprite(\"assets\\\\playership.png\");\n// W02.1: Create the player ship instance.\nplayer_sprite->SetX(static_cast<int>(width / 2 - player_sprite->GetWidth() / 2));\nplayer_sprite->SetY(static_cast<int>(height - player_sprite->GetHeight() * 1.5));\n\nplayership = new PlayerShip();\nplayership->SetPosition(static_cast<int>(width / 2 - player_sprite->GetWidth() / 2),\n    static_cast<int>(height - player_sprite->GetHeight() * 1.5));\nplayership->Initialise(player_sprite);  \nWe replenished our ammo:  void \nGame::FireSpaceShipBullet()\n{\n    // W02.3: Load the player bullet sprite.      \n    Sprite* bullet_sprite = m_pBackBuffer->CreateSprite(\"assets\\\\playerbullet.png\");\n    bullet_sprite->SetX(static_cast<int>(playership->GetPositionX() + playership->GetWidth() / 2 - bullet_sprite->GetWidth() / 2));\n    bullet_sprite->SetY(static_cast<int>(playership->GetPositionY()));\n    // W02.3: Create a new bullet object.\n    Bullet* bullet = new Bullet();\n    bullet->SetX(static_cast<int>(playership->GetPositionX() + playership->GetWidth() / 2 - bullet_sprite->GetWidth() / 2));\n    bullet->SetY(static_cast<int>(playership->GetPositionY()));\n    bullet->Initialise(bullet_sprite);\n    // W02.3: Set the bullets vertical velocity.\n    bullet->SetVerticalVelocity(-200);\n    // W02.3: Add the new bullet to the bullet container.\n    bullets_container.push_back(bullet);\n}  \nAnd now we were ready for war!  void \nGame::SpawnEnemy(int x, int y)\n{\n    // W02.2: Load the alien enemy sprite file.\n    Sprite* enemy_sprite = m_pBackBuffer->CreateSprite(\"assets\\\\alienenemy.png\");\n    enemy_sprite->SetX(static_cast<int>(x * enemy_sprite->GetWidth() * 1.5 + 72));\n    enemy_sprite->SetY(static_cast<int>(y * enemy_sprite->GetHeight() * 1.5 + enemy_sprite->GetHeight()));\n    // W02.2: Create a new Enemy object. \n    Enemy* enemy = new Enemy();\n    enemy->SetX(static_cast<int>(x * enemy_sprite->GetWidth() * 1.5 + 72));\n    enemy->SetY(static_cast<int>(y * enemy_sprite->GetHeight() * 1.5 + enemy_sprite->GetHeight()));\n    enemy->Initialise(enemy_sprite);\n    // W02.2: Add the new Enemy to the enemy container.\n    enemies_container.push_back(enemy);\n}  \nThe invaders had no chance...  enemies_container.erase(\n        std::remove_if(\n        enemies_container.begin(), enemies_container.end(),\n        [](Enemy* e)\n        {\n            bool dead = e->IsDead();\n            if (dead)\n            {\n                delete e;\n                e = 0;\n            }\n            return dead;\n        }), enemies_container.end());",
            "title": "And Beyond..."
        },
        {
            "location": "/learning/#the-clean-up",
            "text": "After the battle was over, we had to do a lot of cleanup. Which wasnt something that we were too familiar with.  Game::~Game()\n{\n    delete m_pInputHandler;\n    m_pInputHandler = 0;\n    delete m_pBackBuffer;\n    m_pBackBuffer = 0;\n    delete playership;\n    playership = 0;\n\n    for (std::vector<Enemy*>::iterator iter = enemies_container.begin();\n        iter != enemies_container.end(); ++iter)\n    {\n        delete *iter;\n        *iter = 0;\n    }\n\n    for (std::vector<Bullet*>::iterator iter = bullets_container.begin();\n        iter != bullets_container.end(); ++iter)\n    {\n        delete *iter;\n        *iter = 0;\n    }\n}  In the end, this little run taught us to create much more advanced solutions using C++, we were also able to do leak detection through some lines of code and clean had to scavenge the solutions to stop the leaks from happening. with the help of other third party open-source api.",
            "title": "The Clean up"
        },
        {
            "location": "/projects/",
            "text": "University Project - Zombie survival\n\n\nFor our university project we decided to create a top down zombie survival game. The selling poing of our game was that it had advanced AI and flocking systems so that zombies could create a horde.\n\n\nIn our current stage of development, we are able to:\n\n\n\n\ncreate levels using a simple map editor\n\n\nmove around the level in search for resources\n\n\nshoot zombies and kill them\n\n\nzombies wander aimlessly\n\n\nzombies will agro the player if they get too close and follow.\n\n\n\n\nWe have used \nBox2D\n for 2D physics and collision dectection etc.\nFor drawing and input control, we have used \nSDL\n.\nSound effects are played using \nfmod\n.\nThe zombies all have their individual instances of Finite State Machines which implement Steering Behaviours. We were able to start off in developing the AI by reading and following the book \nProgramming Game AI by Example\n. The book really made it easy to learn how AI worked and with the example source code available, the time taken to understand the concepts were drastically reduced.",
            "title": "Projects"
        },
        {
            "location": "/projects/#university-project-zombie-survival",
            "text": "For our university project we decided to create a top down zombie survival game. The selling poing of our game was that it had advanced AI and flocking systems so that zombies could create a horde. \nIn our current stage of development, we are able to:   create levels using a simple map editor  move around the level in search for resources  shoot zombies and kill them  zombies wander aimlessly  zombies will agro the player if they get too close and follow.   We have used  Box2D  for 2D physics and collision dectection etc.\nFor drawing and input control, we have used  SDL .\nSound effects are played using  fmod .\nThe zombies all have their individual instances of Finite State Machines which implement Steering Behaviours. We were able to start off in developing the AI by reading and following the book  Programming Game AI by Example . The book really made it easy to learn how AI worked and with the example source code available, the time taken to understand the concepts were drastically reduced.",
            "title": "University Project - Zombie survival"
        },
        {
            "location": "/resume/",
            "text": "Skills\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nC#\n\n\nC++\n\n\nHTML\n\n\nCSS\n\n\n\n\n\n\nJavascript\n\n\nAngularJS\n\n\nPHP\n\n\nASP.NET\n\n\nSQL\n\n\n\n\n\n\nSCRUM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInnovative thinking developed through experience in internships\n\nEye for design & attention to detail\n\nFluent in English and Korean \n\n\nExperience\n\n\n|\n LANcom Technology Ltd Software Developer Intern\n\n\n|\n \nDecember 2015 \u2013 February 2016\n\n\n\n\nPorting over existing Silverlight application into a web based application\n\n\nHTML, AngularJS, and Bootstrap front-end\n\n\nC#, ASP.NET Web API, and RavenDB back-end\n\n\nCompleted a minimum viable product\n\n\n\n\n|\n ASB Bank Ltd Innovative Team Intern\n\n\n|\n \nDecember 2014 \u2013 February 2015\n\n\n\n\nCreating educational desktop games for touch enables surfaces.\n\n\nC# and Team Foundation Services for source control\n\n\nSCRUM agile development methodology\n\n\nCompleted several touch based educational games\n\n\n\n\nEducation\n\n\nBachelor of Computer & Information Sciences\n\n\nSoftware Development Major\n\nAuckland University of Technology \n2014 \u2013 2016",
            "title": "Resume"
        },
        {
            "location": "/resume/#skills",
            "text": "Java  C#  C++  HTML  CSS    Javascript  AngularJS  PHP  ASP.NET  SQL    SCRUM         Innovative thinking developed through experience in internships \nEye for design & attention to detail \nFluent in English and Korean",
            "title": "Skills"
        },
        {
            "location": "/resume/#experience",
            "text": "|  LANcom Technology Ltd Software Developer Intern  |   December 2015 \u2013 February 2016   Porting over existing Silverlight application into a web based application  HTML, AngularJS, and Bootstrap front-end  C#, ASP.NET Web API, and RavenDB back-end  Completed a minimum viable product   |  ASB Bank Ltd Innovative Team Intern  |   December 2014 \u2013 February 2015   Creating educational desktop games for touch enables surfaces.  C# and Team Foundation Services for source control  SCRUM agile development methodology  Completed several touch based educational games",
            "title": "Experience"
        },
        {
            "location": "/resume/#education",
            "text": "Bachelor of Computer & Information Sciences  Software Development Major \nAuckland University of Technology  2014 \u2013 2016",
            "title": "Education"
        },
        {
            "location": "/about/",
            "text": "Contact Details\n\n\nSeong Jho\n\nseongjho@outlook.com",
            "title": "About"
        },
        {
            "location": "/about/#contact-details",
            "text": "Seong Jho \nseongjho@outlook.com",
            "title": "Contact Details"
        },
        {
            "location": "/references/",
            "text": "AUT. (n.d.). GP2DFramework. Retrieved October 22, 2016, from \nhttps://blackboard.aut.ac.nz/bbcswebdav/pid-3865534-dt-content-rid-7060285_4/xid-7060285_4\n\n\n\n\n\n\nFrewen, A., Jho, S., & Pike, A. (n.d.). The Second to Last of Us. Retrieved from \nhttps://github.com/glasody/AUT_GROUP_PROJ\n\n\n\n\n\n\nBox2D. (n.d.). Retrieved October 24, 2016, from \nhttp://box2d.org/\n\n\n\n\n\n\nFMOD. (n.d.). Retrieved October 24, 2016, from \nhttp://www.fmod.org/\n\n\n\n\n\n\nSDL. (n.d.). Retrieved October 24, 2016, from \nhttps://www.libsdl.org/\n\n\n\n\n\n\nBuckland, M. (2005). Programming game AI by example. Sudbury, Mass. : Wordware Pub., 2005.",
            "title": "References"
        }
    ]
}